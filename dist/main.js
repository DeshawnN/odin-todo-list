(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>d});var o=e(537),a=e.n(o),r=e(645),i=e.n(r)()(a());i.push([n.id,"body {\n    background-color: black;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\nh1, h2 { text-align: center; }\n\n.todolist {\n    background-color: gray;\n    border: 2px solid white;\n    border-radius: 6px;\n    margin: 8px;\n    display: flex;\n    flex-direction: column;\n    width: 375px;\n}\n\n.todolist button {\n    padding: 8px 24px;\n}\n\n[data-add-todo] {\n    align-self: center;\n}\n\n.todolist, .drilldown {\n    display: flex;\n    flex-direction: column;\n}\n\n.drilldown button {\n    align-self: flex-end;\n}\n\n.todo {\n    padding: 8px 6px;\n    background: rgba(255, 255, 255, 0.5);\n    border: 2px solid white;\n    border-radius: 4px;\n    margin: 6px 25px;\n    color: black;\n\n}\n\n.todo > *, .drilldown > * {\n    padding: 8px 0;\n}\n\n\n.hidden {\n    display: none;\n}\n\n.input-area {\n    display: flex;\n    flex-wrap: wrap;\n    width: 375px;\n    margin: 0 auto;\n}\n\n.input-area label {\n    padding: 5px\n}\n\n[data-new-list] {\n    width: 100px;\n    margin: 0 auto;\n    display: block;\n}\n\n.new-list-input {\n    padding: 15px;\n    display: flex;\n    margin: 0 auto;\n    width: 375px;\n    gap: 10px;\n}\n\n.new-list-input > * {\n    flex: 1;\n}\n\n[data-delete-list] {\n    align-self: flex-end;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,uBAAuB;AAC3B;;AAEA,SAAS,kBAAkB,EAAE;;AAE7B;IACI,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;IAChB,oCAAoC;IACpC,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;;AAEhB;;AAEA;IACI,cAAc;AAClB;;;AAGA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI;AACJ;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,cAAc;IACd,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,oBAAoB;AACxB",sourcesContent:["body {\n    background-color: black;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\nh1, h2 { text-align: center; }\n\n.todolist {\n    background-color: gray;\n    border: 2px solid white;\n    border-radius: 6px;\n    margin: 8px;\n    display: flex;\n    flex-direction: column;\n    width: 375px;\n}\n\n.todolist button {\n    padding: 8px 24px;\n}\n\n[data-add-todo] {\n    align-self: center;\n}\n\n.todolist, .drilldown {\n    display: flex;\n    flex-direction: column;\n}\n\n.drilldown button {\n    align-self: flex-end;\n}\n\n.todo {\n    padding: 8px 6px;\n    background: rgba(255, 255, 255, 0.5);\n    border: 2px solid white;\n    border-radius: 4px;\n    margin: 6px 25px;\n    color: black;\n\n}\n\n.todo > *, .drilldown > * {\n    padding: 8px 0;\n}\n\n\n.hidden {\n    display: none;\n}\n\n.input-area {\n    display: flex;\n    flex-wrap: wrap;\n    width: 375px;\n    margin: 0 auto;\n}\n\n.input-area label {\n    padding: 5px\n}\n\n[data-new-list] {\n    width: 100px;\n    margin: 0 auto;\n    display: block;\n}\n\n.new-list-input {\n    padding: 15px;\n    display: flex;\n    margin: 0 auto;\n    width: 375px;\n    gap: 10px;\n}\n\n.new-list-input > * {\n    flex: 1;\n}\n\n[data-delete-list] {\n    align-self: flex-end;\n}"],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,a,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var r={},i=[],d=0;d<n.length;d++){var s=n[d],c=o.base?s[0]+o.base:s[0],l=r[c]||0,A="".concat(c," ").concat(l);r[c]=l+1;var p=e(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var f=a(u,o);o.byIndex=d,t.splice(d,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var r=o(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var d=e(r[i]);t[d].references--}for(var s=o(n,a),c=0;c<r.length;c++){var l=e(r[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=s}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,a&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return n[o](r,r.exports,e),r.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),o=e(795),a=e.n(o),r=e(569),i=e.n(r),d=e(565),s=e.n(d),c=e(216),l=e.n(c),A=e(589),p=e.n(A),u=e(426),f={};function x(n,t,e,o){return o=o.slice(0,1).toUpperCase()+o.slice(1),{title:n,description:t,dueDate:new Date(e).toDateString(),priority:o}}f.styleTagTransform=p(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),t()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class m{static TodoList(n,t){const e=document.createElement("div");e.classList.add("todolist");const o=document.createElement("button");o.textContent="X",o.setAttribute("data-delete-list",""),o.addEventListener("click",(()=>{n.removeList(t),n.storeList(),C.todos(n)})),e.appendChild(o);const a=document.createElement("h2");a.textContent=t,e.appendChild(a);const r=document.createElement("button");return r.textContent="Add",r.setAttribute("data-add-todo",""),r.addEventListener("click",(()=>{const e=document.querySelector(".input-area"),o=e.querySelector("[data-title]"),a=e.querySelector("[data-description]"),r=e.querySelector("[data-due-date]"),i=e.querySelector("[data-priority]");if(!o.value)return;const d=new x(o.value,a.value,r.value,i.value);n.addTodo(d,t),o.value="",a.value="",r.value="",i.value="low",n.storeList(),C.todos(n)})),e.appendChild(r),e}static Todo(n,t,e){const o=document.createElement("div");o.classList.add("todo");const a=document.createElement("div");a.textContent=`Title: ${n.title}`,o.append(a);const r=document.createElement("div");r.classList.add("drilldown"),r.classList.toggle("hidden"),o.addEventListener("click",(n=>{r.classList.toggle("hidden")}));const i=document.createElement("div");i.textContent=`Description: ${n.description}`,r.append(i);const d=document.createElement("div");d.textContent=`Date Due: ${n.dueDate}`,r.appendChild(d);const s=document.createElement("div");s.textContent=`Priority: ${n.priority}`,r.appendChild(s);const c=document.createElement("button");return c.textContent="Delete",c.addEventListener("click",(o=>{o.stopPropagation();const a=t.list()[e].indexOf(n);t.removeTodo(e,a),t.storeList(),C.todos(t)})),r.appendChild(c),o.appendChild(r),o}static NewListButton(){const n=document.createElement("button");return n.textContent="New List",n}}class C{static todos(n){const t=document.querySelector(".container");this.clear(t);const e=Object.keys(n.list());for(const o of e){const e=m.TodoList(n,o);for(const t of n.list()[o]){const a=m.Todo(t,n,o);e.appendChild(a)}t.appendChild(e)}}static clear(n){n.innerHTML=""}}!function(){const n=function(){let n={default:[new x("Finish the Todo Application","Finalize the Todo Web App","None","None"),new x("Start next Application","Find your next Project and develop it!","None","None")]};return{addTodo:(t,e)=>n[e].push(t),removeTodo:(t,e)=>{n[t].splice(e,1)},addList:t=>{n[t]=[]},removeList:t=>{delete n[t]},list:()=>n,storeList:()=>{localStorage.setItem("todoList",JSON.stringify(n))},loadList:()=>{n=JSON.parse(localStorage.getItem("todoList"))}}}();localStorage.getItem("todoList")&&n.loadList(),document.querySelector("[data-new-list]").addEventListener("click",(()=>{const t=document.querySelector("[data-new-list-name]");n.addList(t.value),t.value="",n.storeList(),C.todos(n)})),C.todos(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,