(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([n.id,"body {\n    background-color: black;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\nh1, h2 { text-align: center; }\n\n.todolist {\n    background-color: gray;\n    border: 2px solid white;\n    border-radius: 6px;\n    margin: 8px;\n    display: flex;\n    flex-direction: column;\n    width: 375px;\n}\n\n.todolist button {\n    padding: 8px 24px;\n    align-self: center;\n}\n\n.todolist, .drilldown {\n    display: flex;\n    flex-direction: column;\n}\n\n.drilldown button {\n    align-self: flex-end;\n}\n\n.todo {\n    padding: 8px 6px;\n    background: rgba(255, 255, 255, 0.5);\n    border: 2px solid white;\n    border-radius: 4px;\n    margin: 6px 25px;\n    color: black;\n\n}\n\n.todo > *, .drilldown > * {\n    padding: 8px 0;\n}\n\n\n.hidden {\n    display: none;\n}\n\n.input-area {\n    display: flex;\n    flex-wrap: wrap;\n    width: 375px;\n    margin: 0 auto;\n}\n\n.input-area label {\n    padding: 5px\n}\n\n[data-new-list] {\n    width: 100px;\n    margin: 0 auto;\n    display: block;\n}\n\n.new-list-input {\n    padding: 15px;\n    display: flex;\n    margin: 0 auto;\n    width: 375px;\n    gap: 10px;\n}\n\n.new-list-input > * {\n    flex: 1;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,uBAAuB;AAC3B;;AAEA,SAAS,kBAAkB,EAAE;;AAE7B;IACI,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;IAChB,oCAAoC;IACpC,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;;AAEhB;;AAEA;IACI,cAAc;AAClB;;;AAGA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI;AACJ;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,cAAc;IACd,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,OAAO;AACX",sourcesContent:["body {\n    background-color: black;\n    color: white;\n}\n\n.container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\nh1, h2 { text-align: center; }\n\n.todolist {\n    background-color: gray;\n    border: 2px solid white;\n    border-radius: 6px;\n    margin: 8px;\n    display: flex;\n    flex-direction: column;\n    width: 375px;\n}\n\n.todolist button {\n    padding: 8px 24px;\n    align-self: center;\n}\n\n.todolist, .drilldown {\n    display: flex;\n    flex-direction: column;\n}\n\n.drilldown button {\n    align-self: flex-end;\n}\n\n.todo {\n    padding: 8px 6px;\n    background: rgba(255, 255, 255, 0.5);\n    border: 2px solid white;\n    border-radius: 4px;\n    margin: 6px 25px;\n    color: black;\n\n}\n\n.todo > *, .drilldown > * {\n    padding: 8px 0;\n}\n\n\n.hidden {\n    display: none;\n}\n\n.input-area {\n    display: flex;\n    flex-wrap: wrap;\n    width: 375px;\n    margin: 0 auto;\n}\n\n.input-area label {\n    padding: 5px\n}\n\n[data-new-list] {\n    width: 100px;\n    margin: 0 auto;\n    display: block;\n}\n\n.new-list-input {\n    padding: 15px;\n    display: flex;\n    margin: 0 auto;\n    width: 375px;\n    gap: 10px;\n}\n\n.new-list-input > * {\n    flex: 1;\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,a,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},i=[],c=0;c<n.length;c++){var d=n[c],s=o.base?d[0]+o.base:d[0],l=r[s]||0,A="".concat(s," ").concat(l);r[s]=l+1;var p=t(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=a(u,o);o.byIndex=c,e.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var r=o(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var c=t(r[i]);e[c].references--}for(var d=o(n,a),s=0;s<r.length;s++){var l=t(r[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),o=t(795),a=t.n(o),r=t(569),i=t.n(r),c=t(565),d=t.n(c),s=t(216),l=t.n(s),A=t(589),p=t.n(A),u=t(426),f={};function x(n,e,t,o){return o=o.slice(0,1).toUpperCase()+o.slice(1),{title:n,description:e,dueDate:new Date(t).toDateString(),priority:o}}f.styleTagTransform=p(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class C{static TodoList(n,e){const t=document.createElement("div");t.classList.add("todolist");const o=document.createElement("h2");o.textContent=e,t.appendChild(o);const a=document.createElement("button");return a.textContent="Add",a.addEventListener("click",(()=>{const t=document.querySelector(".input-area"),o=t.querySelector("[data-title]"),a=t.querySelector("[data-description]"),r=t.querySelector("[data-due-date]"),i=t.querySelector("[data-priority]");if(!o.value)return;const c=new x(o.value,a.value||"None",new Date(r.value).toDateString()||new Date(Date.now()).toDateString(),i.value||"low");n.addTodo(c,e),o.value="",a.value="",r.value="",i.value="low",m.todos(n)})),t.appendChild(a),t}static Todo(n,e,t){const o=document.createElement("div");o.classList.add("todo");const a=document.createElement("div");a.textContent=`Title: ${n.title}`,o.append(a);const r=document.createElement("div");r.classList.add("drilldown"),r.classList.toggle("hidden"),o.addEventListener("click",(n=>{r.classList.toggle("hidden")}));const i=document.createElement("div");i.textContent=`Description: ${n.description}`,r.append(i);const c=document.createElement("div");c.textContent=`Date Due: ${n.dueDate}`,r.appendChild(c);const d=document.createElement("div");d.textContent=`Priority: ${n.priority}`,r.appendChild(d);const s=document.createElement("button");return s.textContent="Delete",s.addEventListener("click",(o=>{o.stopPropagation();const a=e.list()[t].indexOf(n);e.removeTodo(t,a),m.todos(e)})),r.appendChild(s),o.appendChild(r),o}static NewListButton(){const n=document.createElement("button");return n.textContent="New List",n}}class m{static todos(n){const e=document.querySelector(".container");this.clear(e);const t=Object.keys(n.list());for(const o of t){const t=C.TodoList(n,o);for(const e of n.list()[o]){const a=C.Todo(e,n,o);t.appendChild(a)}e.appendChild(t)}}static clear(n){n.innerHTML=""}}!function(){const n=function(){const n={default:[new x("Finish the Todo Application","Finalize the Todo Web App","None","None"),new x("Start next Application","Find your next Project and develop it!","None","None")]};return{addTodo:(e,t)=>n[t].push(e),removeTodo:(e,t)=>{n[e].splice(t,1)},addList:e=>{n[e]=[]},list:()=>n}}();document.querySelector("[data-new-list]").addEventListener("click",(()=>{const e=document.querySelector("[data-new-list-name]");n.addList(e.value),e.value="",m.todos(n)})),m.todos(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,